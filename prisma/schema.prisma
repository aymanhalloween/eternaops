// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core entities for streamlined operations
model RetirementHome {
  id          Int        @id @default(autoincrement())
  name        String
  contactInfo String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  residents   Resident[]
  
  @@map("retirement_homes")
}

model Resident {
  id              Int      @id @default(autoincrement())
  name            String
  backgroundNotes String?
  progressStatus  String   @default("Active")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Foreign keys
  homeId          Int
  
  // Relations
  home            RetirementHome @relation(fields: [homeId], references: [id])
  interviews      Interview[]
  chapters        Chapter[]
  exports         Export[]
  assignments     TeamAssignment[]
  
  @@map("residents")
}

model Interview {
  id             Int      @id @default(autoincrement())
  fileUrl        String?
  transcriptText String?
  status         String   @default("Pending")
  sessionNumber  Int?
  uploadDate     DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Foreign keys
  residentId     Int
  
  // Relations
  resident       Resident @relation(fields: [residentId], references: [id])
  chapters       Chapter[]
  
  @@map("interviews")
}

model Chapter {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  order     Int
  status    String   @default("Draft")
  wordCount Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Foreign keys
  residentId   Int
  interviewId  Int?
  
  // Relations
  resident     Resident   @relation(fields: [residentId], references: [id])
  interview    Interview? @relation(fields: [interviewId], references: [id])
  versions     ChapterVersion[]
  
  @@map("chapters")
}

model ChapterVersion {
  id        Int      @id @default(autoincrement())
  diff      String?
  notes     String?
  createdAt DateTime @default(now())
  
  // Foreign keys
  chapterId Int
  editorId  String? // User ID from auth system
  
  // Relations
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  
  @@map("chapter_versions")
}

model Export {
  id        Int      @id @default(autoincrement())
  type      String   // "book", "podcast", "newsletter"
  fileUrl   String
  status    String   @default("Processing")
  createdAt DateTime @default(now())
  
  // Foreign keys
  residentId Int
  
  // Relations
  resident   Resident @relation(fields: [residentId], references: [id])
  
  @@map("exports")
}

model TeamAssignment {
  id           Int      @id @default(autoincrement())
  storytellerId String?
  writerId     String?
  editorId     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Foreign keys
  residentId   Int
  
  // Relations
  resident     Resident @relation(fields: [residentId], references: [id])
  
  @@map("team_assignments")
}
